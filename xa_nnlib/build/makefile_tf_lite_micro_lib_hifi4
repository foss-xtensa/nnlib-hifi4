#
# Copyright (c) 2018-2021 Cadence Design Systems, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to use this Software with Cadence processor cores only and
# not with any other processors and platforms, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#


.PHONY: all install clean

ROOTDIR = ..
CODEC_NAME = tf_lite_micro_lib
TFDIR = test/tf_micro_lite
NOSTRIP=1
RELEASE_BUILD?=1

CFLAGS += \
      -DMODEL_INT16 \
      -DNNLIB_V2 \
      -DEIGEN_NO_MALLOC \
      -DTF_LITE_STATIC_MEMORY \
			-DTF_LITE_DISABLE_X86_NEON

ifeq ($(DISABLE_ARG_CHK), 1)
CFLAGS += -DDISABLE_ARG_CHK
endif

INCLUDES = \
    -I$(ROOTDIR)/include \
    -I$(ROOTDIR)/include/nnlib \
    -I$(ROOTDIR)/test/include/ \

# For TF Micro Lite
INCLUDES += \
    -I$(ROOTDIR)/$(TFDIR)/tensorflow/lite/micro/tools/make/downloads/flatbuffers/include \
    -I$(ROOTDIR)/$(TFDIR)/tensorflow/lite/micro/tools/make/downloads/ruy \
    -I$(ROOTDIR)/$(TFDIR)/tensorflow/lite/micro/tools/make/downloads/gemmlowp \
    -I$(ROOTDIR)/$(TFDIR) \
    -I$(ROOTDIR)/$(TFDIR)/tensorflow/lite \
    -I$(ROOTDIR)/$(TFDIR)/tensorflow/lite/c \
    -I$(ROOTDIR)/$(TFDIR)/tensorflow/lite/kernels \
    -I$(ROOTDIR)/$(TFDIR)/tensorflow/lite/micro \
    -I$(ROOTDIR)/$(TFDIR)/tensorflow/lite/micro/kernels/xtensa_hifi \

TFULITE_SRCDIRS = \
    $(ROOTDIR)/$(TFDIR)/tensorflow/lite/micro \
    $(ROOTDIR)/$(TFDIR)/tensorflow/lite/micro/kernels \
    $(ROOTDIR)/$(TFDIR)/tensorflow/lite/micro/xtensa_hifi \
    $(ROOTDIR)/$(TFDIR)/tensorflow/lite/micro/kernels/xtensa_hifi \
    $(ROOTDIR)/$(TFDIR)/tensorflow/lite/micro/benchmarks \
    $(ROOTDIR)/$(TFDIR)/tensorflow/lite/micro/testing \
    $(ROOTDIR)/$(TFDIR)/tensorflow/lite/micro/memory_planner \
    $(ROOTDIR)/$(TFDIR)/tensorflow/lite \

TFULITE_SRCDIRS += \
    $(ROOTDIR)/$(TFDIR)/tensorflow/lite/core/api \
    $(ROOTDIR)/$(TFDIR)/tensorflow/lite/c \
    $(ROOTDIR)/$(TFDIR)/tensorflow/lite/kernels \
    $(ROOTDIR)/$(TFDIR)/tensorflow/lite/kernels/internal \
    $(ROOTDIR)/$(TFDIR)/tensorflow/lite/schema \

vpath %.cpp $(TFULITE_SRCDIRS)
vpath %.c   $(TFULITE_SRCDIRS)
vpath %.cc  $(TFULITE_SRCDIRS)

TFULITECCOBJS += \
    activations.o \
    add.o \
    comparisons.o \
    conv.o \
    depthwise_conv.o \
    floor.o \
    fully_connected.o \
    hard_swish.o \
    logistic.o \
    mul.o \
    pooling.o \
    prelu.o \
    quantize.o \
    softmax.o \
    sub.o \
    svdf.o \
    tanh.o \

TFULITECCOBJS += \
		arg_min_max.o \
		ceil.o \
		circular_buffer.o \
		concatenation.o \
		dequantize.o \
		elementwise.o \
		l2norm.o \
		logical.o \
		maximum_minimum.o \
		neg.o \
		pack.o \
		pad.o \
		reduce.o \
		reshape.o \
		resize_nearest_neighbor.o \
		round.o \
		shape.o \
		split.o \
		split_v.o \
		strided_slice.o \
		unpack.o \

TFULITECCOBJS += \
		simple_memory_allocator.o \
		memory_helpers.o \
		test_helpers.o \
		recording_micro_allocator.o \
		micro_error_reporter.o \
		micro_time.o \
		debug_log.o \
		micro_allocator.o \
		micro_string.o \
		micro_profiler.o \
		micro_utils.o \
		recording_simple_memory_allocator.o \
		all_ops_resolver.o \
		micro_interpreter.o \
		linear_memory_planner.o \
		greedy_memory_planner.o \
		error_reporter.o \
		flatbuffer_conversions.o \
		op_resolver.o \
		tensor_utils.o \
		quantization_util.o \
		kernel_util.o \
		schema_utils.o \
		micro_kernel_util.o \

TFULITECOBJS += \
		common.o \

LIBO2OBJS =
LIBOSOBJS =
LIBOSCPPOBJS =

ifeq ($(RELEASE_BUILD), 1)
LIBO2CPPOBJS = $(TFULITECCOBJS)
else
LIBO2CCOBJS = $(TFULITECCOBJS)
endif

CFLAGS += \
        -ffunction-sections \
        -fpermissive \
				-fno-unsafe-math-optimizations

ifeq ("$(CORE)", "hifi5")
  CFLAGS += -DNNLIB_HIFI5 
else
  CFLAGS += -DNNLIB_V2 
endif  

ifneq ($(CC), xt-clang)
  CFLAGS += -OPT:Olimit=12125
endif

ifeq ($(CPU), x86)
vpath %.c $(ROOTDIR)/algo/cstub/src
CSTUBOSOBJS =

INCLUDES += \
    -I$(ROOTDIR)/algo/cstub/include
endif

include $(ROOTDIR)/build/common.mk
